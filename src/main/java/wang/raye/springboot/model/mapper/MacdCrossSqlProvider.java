package wang.raye.springboot.model.mapper;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;
import wang.raye.springboot.model.MacdCross;
import wang.raye.springboot.model.MacdCrossCriteria.Criteria;
import wang.raye.springboot.model.MacdCrossCriteria.Criterion;
import wang.raye.springboot.model.MacdCrossCriteria;

public class MacdCrossSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table macd_cross
     *
     * @mbg.generated
     */
    public String countByExample(MacdCrossCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("macd_cross");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table macd_cross
     *
     * @mbg.generated
     */
    public String deleteByExample(MacdCrossCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("macd_cross");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table macd_cross
     *
     * @mbg.generated
     */
    public String insertSelective(MacdCross record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("macd_cross");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getExchange() != null) {
            sql.VALUES("exchange", "#{exchange,jdbcType=VARCHAR}");
        }
        
        if (record.getSymbol() != null) {
            sql.VALUES("symbol", "#{symbol,jdbcType=VARCHAR}");
        }
        
        if (record.getType() != null) {
            sql.VALUES("type", "#{type,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=CHAR}");
        }
        
        if (record.getQuota1() != null) {
            sql.VALUES("quota1", "#{quota1,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota2() != null) {
            sql.VALUES("quota2", "#{quota2,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota3() != null) {
            sql.VALUES("quota3", "#{quota3,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota4() != null) {
            sql.VALUES("quota4", "#{quota4,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota1() != null) {
            sql.VALUES("pre_quota1", "#{preQuota1,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota2() != null) {
            sql.VALUES("pre_quota2", "#{preQuota2,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota3() != null) {
            sql.VALUES("pre_quota3", "#{preQuota3,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota4() != null) {
            sql.VALUES("pre_quota4", "#{preQuota4,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota1() != null) {
            sql.VALUES("thr_quota1", "#{thrQuota1,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota2() != null) {
            sql.VALUES("thr_quota2", "#{thrQuota2,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota3() != null) {
            sql.VALUES("thr_quota3", "#{thrQuota3,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota4() != null) {
            sql.VALUES("thr_quota4", "#{thrQuota4,jdbcType=DOUBLE}");
        }
        
        if (record.getPrice() != null) {
            sql.VALUES("price", "#{price,jdbcType=DOUBLE}");
        }
        
        if (record.getPrePrice() != null) {
            sql.VALUES("pre_price", "#{prePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getThrPrice() != null) {
            sql.VALUES("thr_price", "#{thrPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getThrLow() != null) {
            sql.VALUES("thr_low", "#{thrLow,jdbcType=DOUBLE}");
        }
        
        if (record.getHigh() != null) {
            sql.VALUES("high", "#{high,jdbcType=DOUBLE}");
        }
        
        if (record.getPeriod() != null) {
            sql.VALUES("period", "#{period,jdbcType=VARCHAR}");
        }
        
        if (record.getKlineTime() != null) {
            sql.VALUES("kline_time", "#{klineTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table macd_cross
     *
     * @mbg.generated
     */
    public String selectByExample(MacdCrossCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("exchange");
        sql.SELECT("symbol");
        sql.SELECT("type");
        sql.SELECT("status");
        sql.SELECT("quota1");
        sql.SELECT("quota2");
        sql.SELECT("quota3");
        sql.SELECT("quota4");
        sql.SELECT("pre_quota1");
        sql.SELECT("pre_quota2");
        sql.SELECT("pre_quota3");
        sql.SELECT("pre_quota4");
        sql.SELECT("thr_quota1");
        sql.SELECT("thr_quota2");
        sql.SELECT("thr_quota3");
        sql.SELECT("thr_quota4");
        sql.SELECT("price");
        sql.SELECT("pre_price");
        sql.SELECT("thr_price");
        sql.SELECT("thr_low");
        sql.SELECT("high");
        sql.SELECT("period");
        sql.SELECT("kline_time");
        sql.SELECT("update_time");
        sql.FROM("macd_cross");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table macd_cross
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        MacdCross record = (MacdCross) parameter.get("record");
        MacdCrossCriteria example = (MacdCrossCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("macd_cross");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getExchange() != null) {
            sql.SET("exchange = #{record.exchange,jdbcType=VARCHAR}");
        }
        
        if (record.getSymbol() != null) {
            sql.SET("symbol = #{record.symbol,jdbcType=VARCHAR}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{record.type,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=CHAR}");
        }
        
        if (record.getQuota1() != null) {
            sql.SET("quota1 = #{record.quota1,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota2() != null) {
            sql.SET("quota2 = #{record.quota2,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota3() != null) {
            sql.SET("quota3 = #{record.quota3,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota4() != null) {
            sql.SET("quota4 = #{record.quota4,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota1() != null) {
            sql.SET("pre_quota1 = #{record.preQuota1,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota2() != null) {
            sql.SET("pre_quota2 = #{record.preQuota2,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota3() != null) {
            sql.SET("pre_quota3 = #{record.preQuota3,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota4() != null) {
            sql.SET("pre_quota4 = #{record.preQuota4,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota1() != null) {
            sql.SET("thr_quota1 = #{record.thrQuota1,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota2() != null) {
            sql.SET("thr_quota2 = #{record.thrQuota2,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota3() != null) {
            sql.SET("thr_quota3 = #{record.thrQuota3,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota4() != null) {
            sql.SET("thr_quota4 = #{record.thrQuota4,jdbcType=DOUBLE}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{record.price,jdbcType=DOUBLE}");
        }
        
        if (record.getPrePrice() != null) {
            sql.SET("pre_price = #{record.prePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getThrPrice() != null) {
            sql.SET("thr_price = #{record.thrPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getThrLow() != null) {
            sql.SET("thr_low = #{record.thrLow,jdbcType=DOUBLE}");
        }
        
        if (record.getHigh() != null) {
            sql.SET("high = #{record.high,jdbcType=DOUBLE}");
        }
        
        if (record.getPeriod() != null) {
            sql.SET("period = #{record.period,jdbcType=VARCHAR}");
        }
        
        if (record.getKlineTime() != null) {
            sql.SET("kline_time = #{record.klineTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table macd_cross
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("macd_cross");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("exchange = #{record.exchange,jdbcType=VARCHAR}");
        sql.SET("symbol = #{record.symbol,jdbcType=VARCHAR}");
        sql.SET("type = #{record.type,jdbcType=VARCHAR}");
        sql.SET("status = #{record.status,jdbcType=CHAR}");
        sql.SET("quota1 = #{record.quota1,jdbcType=DOUBLE}");
        sql.SET("quota2 = #{record.quota2,jdbcType=DOUBLE}");
        sql.SET("quota3 = #{record.quota3,jdbcType=DOUBLE}");
        sql.SET("quota4 = #{record.quota4,jdbcType=DOUBLE}");
        sql.SET("pre_quota1 = #{record.preQuota1,jdbcType=DOUBLE}");
        sql.SET("pre_quota2 = #{record.preQuota2,jdbcType=DOUBLE}");
        sql.SET("pre_quota3 = #{record.preQuota3,jdbcType=DOUBLE}");
        sql.SET("pre_quota4 = #{record.preQuota4,jdbcType=DOUBLE}");
        sql.SET("thr_quota1 = #{record.thrQuota1,jdbcType=DOUBLE}");
        sql.SET("thr_quota2 = #{record.thrQuota2,jdbcType=DOUBLE}");
        sql.SET("thr_quota3 = #{record.thrQuota3,jdbcType=DOUBLE}");
        sql.SET("thr_quota4 = #{record.thrQuota4,jdbcType=DOUBLE}");
        sql.SET("price = #{record.price,jdbcType=DOUBLE}");
        sql.SET("pre_price = #{record.prePrice,jdbcType=DOUBLE}");
        sql.SET("thr_price = #{record.thrPrice,jdbcType=DOUBLE}");
        sql.SET("thr_low = #{record.thrLow,jdbcType=DOUBLE}");
        sql.SET("high = #{record.high,jdbcType=DOUBLE}");
        sql.SET("period = #{record.period,jdbcType=VARCHAR}");
        sql.SET("kline_time = #{record.klineTime,jdbcType=VARCHAR}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        
        MacdCrossCriteria example = (MacdCrossCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table macd_cross
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(MacdCross record) {
        SQL sql = new SQL();
        sql.UPDATE("macd_cross");
        
        if (record.getExchange() != null) {
            sql.SET("exchange = #{exchange,jdbcType=VARCHAR}");
        }
        
        if (record.getSymbol() != null) {
            sql.SET("symbol = #{symbol,jdbcType=VARCHAR}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{type,jdbcType=VARCHAR}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=CHAR}");
        }
        
        if (record.getQuota1() != null) {
            sql.SET("quota1 = #{quota1,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota2() != null) {
            sql.SET("quota2 = #{quota2,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota3() != null) {
            sql.SET("quota3 = #{quota3,jdbcType=DOUBLE}");
        }
        
        if (record.getQuota4() != null) {
            sql.SET("quota4 = #{quota4,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota1() != null) {
            sql.SET("pre_quota1 = #{preQuota1,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota2() != null) {
            sql.SET("pre_quota2 = #{preQuota2,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota3() != null) {
            sql.SET("pre_quota3 = #{preQuota3,jdbcType=DOUBLE}");
        }
        
        if (record.getPreQuota4() != null) {
            sql.SET("pre_quota4 = #{preQuota4,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota1() != null) {
            sql.SET("thr_quota1 = #{thrQuota1,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota2() != null) {
            sql.SET("thr_quota2 = #{thrQuota2,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota3() != null) {
            sql.SET("thr_quota3 = #{thrQuota3,jdbcType=DOUBLE}");
        }
        
        if (record.getThrQuota4() != null) {
            sql.SET("thr_quota4 = #{thrQuota4,jdbcType=DOUBLE}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{price,jdbcType=DOUBLE}");
        }
        
        if (record.getPrePrice() != null) {
            sql.SET("pre_price = #{prePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getThrPrice() != null) {
            sql.SET("thr_price = #{thrPrice,jdbcType=DOUBLE}");
        }
        
        if (record.getThrLow() != null) {
            sql.SET("thr_low = #{thrLow,jdbcType=DOUBLE}");
        }
        
        if (record.getHigh() != null) {
            sql.SET("high = #{high,jdbcType=DOUBLE}");
        }
        
        if (record.getPeriod() != null) {
            sql.SET("period = #{period,jdbcType=VARCHAR}");
        }
        
        if (record.getKlineTime() != null) {
            sql.SET("kline_time = #{klineTime,jdbcType=VARCHAR}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table macd_cross
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, MacdCrossCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}