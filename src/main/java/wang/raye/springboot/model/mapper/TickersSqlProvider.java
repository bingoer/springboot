package wang.raye.springboot.model.mapper;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;
import wang.raye.springboot.model.Tickers;
import wang.raye.springboot.model.TickersCriteria.Criteria;
import wang.raye.springboot.model.TickersCriteria.Criterion;
import wang.raye.springboot.model.TickersCriteria;

public class TickersSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    public String countByExample(TickersCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("tickers");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    public String deleteByExample(TickersCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("tickers");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    public String insertSelective(Tickers record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tickers");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getTickerId() != null) {
            sql.VALUES("ticker_id", "#{tickerId,jdbcType=VARCHAR}");
        }
        
        if (record.getDisplayPairName() != null) {
            sql.VALUES("display_pair_name", "#{displayPairName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinSymbol() != null) {
            sql.VALUES("coin_symbol", "#{coinSymbol,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinName() != null) {
            sql.VALUES("coin_name", "#{coinName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinId() != null) {
            sql.VALUES("coin_id", "#{coinId,jdbcType=VARCHAR}");
        }
        
        if (record.getBaseSymbol() != null) {
            sql.VALUES("base_symbol", "#{baseSymbol,jdbcType=VARCHAR}");
        }
        
        if (record.getChange1d() != null) {
            sql.VALUES("change1d", "#{change1d,jdbcType=DOUBLE}");
        }
        
        if (record.getType() != null) {
            sql.VALUES("type", "#{type,jdbcType=VARCHAR}");
        }
        
        if (record.getBid() != null) {
            sql.VALUES("bid", "#{bid,jdbcType=DOUBLE}");
        }
        
        if (record.getAsk() != null) {
            sql.VALUES("ask", "#{ask,jdbcType=DOUBLE}");
        }
        
        if (record.getNativePrice() != null) {
            sql.VALUES("native_price", "#{nativePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getLow1d() != null) {
            sql.VALUES("low1d", "#{low1d,jdbcType=DOUBLE}");
        }
        
        if (record.getHigh1d() != null) {
            sql.VALUES("high1d", "#{high1d,jdbcType=DOUBLE}");
        }
        
        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeDisplayName() != null) {
            sql.VALUES("exchange_display_name", "#{exchangeDisplayName,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeZhName() != null) {
            sql.VALUES("exchange_zh_name", "#{exchangeZhName,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeName() != null) {
            sql.VALUES("exchange_name", "#{exchangeName,jdbcType=VARCHAR}");
        }
        
        if (record.getUrl() != null) {
            sql.VALUES("url", "#{url,jdbcType=VARCHAR}");
        }
        
        if (record.getDatacenterPairName() != null) {
            sql.VALUES("dataCenter_pair_name", "#{datacenterPairName,jdbcType=VARCHAR}");
        }
        
        if (record.getTimestamps() != null) {
            sql.VALUES("timestamps", "#{timestamps,jdbcType=VARCHAR}");
        }
        
        if (record.getEnablekline() != null) {
            sql.VALUES("enableKline", "#{enablekline,jdbcType=VARCHAR}");
        }
        
        if (record.getPeriod() != null) {
            sql.VALUES("period", "#{period,jdbcType=VARCHAR}");
        }
        
        if (record.getVolume() != null) {
            sql.VALUES("volume", "#{volume,jdbcType=DOUBLE}");
        }
        
        if (record.getPrice() != null) {
            sql.VALUES("price", "#{price,jdbcType=DOUBLE}");
        }
        
        if (record.getPercent() != null) {
            sql.VALUES("percent", "#{percent,jdbcType=DOUBLE}");
        }
        
        if (record.getBaseVolume() != null) {
            sql.VALUES("base_volume", "#{baseVolume,jdbcType=DOUBLE}");
        }
        
        if (record.getTotalSupply() != null) {
            sql.VALUES("total_supply", "#{totalSupply,jdbcType=DOUBLE}");
        }
        
        if (record.getDecimals() != null) {
            sql.VALUES("decimals", "#{decimals,jdbcType=INTEGER}");
        }
        
        if (record.getContractAddress() != null) {
            sql.VALUES("contract_address", "#{contractAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getContractAddressList() != null) {
            sql.VALUES("contract_address_list", "#{contractAddressList,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketcap() != null) {
            sql.VALUES("marketcap", "#{marketcap,jdbcType=DOUBLE}");
        }
        
        if (record.getChange24h() != null) {
            sql.VALUES("change24h", "#{change24h,jdbcType=DOUBLE}");
        }
        
        if (record.getChange7d() != null) {
            sql.VALUES("change7d", "#{change7d,jdbcType=DOUBLE}");
        }
        
        if (record.getRank() != null) {
            sql.VALUES("rank", "#{rank,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    public String selectByExample(TickersCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("ticker_id");
        sql.SELECT("display_pair_name");
        sql.SELECT("coin_symbol");
        sql.SELECT("coin_name");
        sql.SELECT("coin_id");
        sql.SELECT("base_symbol");
        sql.SELECT("change1d");
        sql.SELECT("type");
        sql.SELECT("bid");
        sql.SELECT("ask");
        sql.SELECT("native_price");
        sql.SELECT("low1d");
        sql.SELECT("high1d");
        sql.SELECT("status");
        sql.SELECT("exchange_display_name");
        sql.SELECT("exchange_zh_name");
        sql.SELECT("exchange_name");
        sql.SELECT("url");
        sql.SELECT("dataCenter_pair_name");
        sql.SELECT("timestamps");
        sql.SELECT("enableKline");
        sql.SELECT("period");
        sql.SELECT("volume");
        sql.SELECT("price");
        sql.SELECT("percent");
        sql.SELECT("base_volume");
        sql.SELECT("total_supply");
        sql.SELECT("decimals");
        sql.SELECT("contract_address");
        sql.SELECT("contract_address_list");
        sql.SELECT("marketcap");
        sql.SELECT("change24h");
        sql.SELECT("change7d");
        sql.SELECT("rank");
        sql.FROM("tickers");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Tickers record = (Tickers) parameter.get("record");
        TickersCriteria example = (TickersCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("tickers");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getTickerId() != null) {
            sql.SET("ticker_id = #{record.tickerId,jdbcType=VARCHAR}");
        }
        
        if (record.getDisplayPairName() != null) {
            sql.SET("display_pair_name = #{record.displayPairName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinSymbol() != null) {
            sql.SET("coin_symbol = #{record.coinSymbol,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinName() != null) {
            sql.SET("coin_name = #{record.coinName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinId() != null) {
            sql.SET("coin_id = #{record.coinId,jdbcType=VARCHAR}");
        }
        
        if (record.getBaseSymbol() != null) {
            sql.SET("base_symbol = #{record.baseSymbol,jdbcType=VARCHAR}");
        }
        
        if (record.getChange1d() != null) {
            sql.SET("change1d = #{record.change1d,jdbcType=DOUBLE}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{record.type,jdbcType=VARCHAR}");
        }
        
        if (record.getBid() != null) {
            sql.SET("bid = #{record.bid,jdbcType=DOUBLE}");
        }
        
        if (record.getAsk() != null) {
            sql.SET("ask = #{record.ask,jdbcType=DOUBLE}");
        }
        
        if (record.getNativePrice() != null) {
            sql.SET("native_price = #{record.nativePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getLow1d() != null) {
            sql.SET("low1d = #{record.low1d,jdbcType=DOUBLE}");
        }
        
        if (record.getHigh1d() != null) {
            sql.SET("high1d = #{record.high1d,jdbcType=DOUBLE}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeDisplayName() != null) {
            sql.SET("exchange_display_name = #{record.exchangeDisplayName,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeZhName() != null) {
            sql.SET("exchange_zh_name = #{record.exchangeZhName,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeName() != null) {
            sql.SET("exchange_name = #{record.exchangeName,jdbcType=VARCHAR}");
        }
        
        if (record.getUrl() != null) {
            sql.SET("url = #{record.url,jdbcType=VARCHAR}");
        }
        
        if (record.getDatacenterPairName() != null) {
            sql.SET("dataCenter_pair_name = #{record.datacenterPairName,jdbcType=VARCHAR}");
        }
        
        if (record.getTimestamps() != null) {
            sql.SET("timestamps = #{record.timestamps,jdbcType=VARCHAR}");
        }
        
        if (record.getEnablekline() != null) {
            sql.SET("enableKline = #{record.enablekline,jdbcType=VARCHAR}");
        }
        
        if (record.getPeriod() != null) {
            sql.SET("period = #{record.period,jdbcType=VARCHAR}");
        }
        
        if (record.getVolume() != null) {
            sql.SET("volume = #{record.volume,jdbcType=DOUBLE}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{record.price,jdbcType=DOUBLE}");
        }
        
        if (record.getPercent() != null) {
            sql.SET("percent = #{record.percent,jdbcType=DOUBLE}");
        }
        
        if (record.getBaseVolume() != null) {
            sql.SET("base_volume = #{record.baseVolume,jdbcType=DOUBLE}");
        }
        
        if (record.getTotalSupply() != null) {
            sql.SET("total_supply = #{record.totalSupply,jdbcType=DOUBLE}");
        }
        
        if (record.getDecimals() != null) {
            sql.SET("decimals = #{record.decimals,jdbcType=INTEGER}");
        }
        
        if (record.getContractAddress() != null) {
            sql.SET("contract_address = #{record.contractAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getContractAddressList() != null) {
            sql.SET("contract_address_list = #{record.contractAddressList,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketcap() != null) {
            sql.SET("marketcap = #{record.marketcap,jdbcType=DOUBLE}");
        }
        
        if (record.getChange24h() != null) {
            sql.SET("change24h = #{record.change24h,jdbcType=DOUBLE}");
        }
        
        if (record.getChange7d() != null) {
            sql.SET("change7d = #{record.change7d,jdbcType=DOUBLE}");
        }
        
        if (record.getRank() != null) {
            sql.SET("rank = #{record.rank,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    public String updateBatchByExampleSelective(Map<String, Object> parameter) {
        List<Tickers> records = (List<Tickers>) parameter.get("record");
        TickersCriteria example = (TickersCriteria) parameter.get("example");

        Tickers record = records.get(0);

        SQL sql = new SQL();
        sql.UPDATE("tickers");

        if (record.getTickerId() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("ticker_id = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getTickerId());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getCoinSymbol() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("coin_symbol = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getCoinSymbol());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getCoinName() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("coin_name = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
//                setSql.append(ticker.getCoinName().replaceAll("'","\\'"));
                setSql.append(ticker.getCoinName().replaceAll("'",""));
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getCoinId() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("coin_id = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getCoinId());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getBaseSymbol() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("base_symbol = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getBaseSymbol());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getChange1d() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("change1d = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getChange1d());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getType() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("type = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getType());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getBid() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("bid = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getBid());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getAsk() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("ask = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getAsk());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getNativePrice() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("native_price = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getNativePrice());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getLow1d() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("low1d = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getLow1d());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getHigh1d() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("high1d = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getHigh1d());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getStatus() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("status = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getStatus());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getExchangeDisplayName() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("exchange_display_name = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getExchangeDisplayName());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getExchangeZhName() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("exchange_zh_name = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getExchangeZhName());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getExchangeName() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("exchange_name = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getExchangeName());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getUrl() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("url = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getUrl());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getDatacenterPairName() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("dataCenter_pair_name = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getDatacenterPairName());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getTimestamps() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("timestamps = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getTimestamps());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getEnablekline() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("enableKline = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getEnablekline());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getVolume() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("volume = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getVolume());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getPrice() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("price = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getPrice());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getPercent() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("percent = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getPercent());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getBaseVolume() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("base_volume = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getBaseVolume());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getTotalSupply() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("total_supply = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getTotalSupply());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getDecimals() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("decimals = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getDecimals());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getContractAddress() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("contract_address = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getContractAddress());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getContractAddressList() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("contract_address_list = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getContractAddressList());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getMarketcap() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("marketcap = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getMarketcap());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getChange7d() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("change7d = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getChange7d());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        if (record.getRank() != null) {
            StringBuffer setSql = new StringBuffer();
            setSql.append("rank = CASE display_pair_name ");
            for (Tickers ticker:records) {
                setSql.append(" when '");
                setSql.append(ticker.getDisplayPairName());
                setSql.append("'  then '");
                setSql.append(ticker.getRank());
                setSql.append("'");
            }
            setSql.append(" end ");
            sql.SET(setSql.toString());
        }

        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tickers");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("ticker_id = #{record.tickerId,jdbcType=VARCHAR}");
        sql.SET("display_pair_name = #{record.displayPairName,jdbcType=VARCHAR}");
        sql.SET("coin_symbol = #{record.coinSymbol,jdbcType=VARCHAR}");
        sql.SET("coin_name = #{record.coinName,jdbcType=VARCHAR}");
        sql.SET("coin_id = #{record.coinId,jdbcType=VARCHAR}");
        sql.SET("base_symbol = #{record.baseSymbol,jdbcType=VARCHAR}");
        sql.SET("change1d = #{record.change1d,jdbcType=DOUBLE}");
        sql.SET("type = #{record.type,jdbcType=VARCHAR}");
        sql.SET("bid = #{record.bid,jdbcType=DOUBLE}");
        sql.SET("ask = #{record.ask,jdbcType=DOUBLE}");
        sql.SET("native_price = #{record.nativePrice,jdbcType=DOUBLE}");
        sql.SET("low1d = #{record.low1d,jdbcType=DOUBLE}");
        sql.SET("high1d = #{record.high1d,jdbcType=DOUBLE}");
        sql.SET("status = #{record.status,jdbcType=VARCHAR}");
        sql.SET("exchange_display_name = #{record.exchangeDisplayName,jdbcType=VARCHAR}");
        sql.SET("exchange_zh_name = #{record.exchangeZhName,jdbcType=VARCHAR}");
        sql.SET("exchange_name = #{record.exchangeName,jdbcType=VARCHAR}");
        sql.SET("url = #{record.url,jdbcType=VARCHAR}");
        sql.SET("dataCenter_pair_name = #{record.datacenterPairName,jdbcType=VARCHAR}");
        sql.SET("timestamps = #{record.timestamps,jdbcType=VARCHAR}");
        sql.SET("enableKline = #{record.enablekline,jdbcType=VARCHAR}");
        sql.SET("period = #{record.period,jdbcType=VARCHAR}");
        sql.SET("volume = #{record.volume,jdbcType=DOUBLE}");
        sql.SET("price = #{record.price,jdbcType=DOUBLE}");
        sql.SET("percent = #{record.percent,jdbcType=DOUBLE}");
        sql.SET("base_volume = #{record.baseVolume,jdbcType=DOUBLE}");
        sql.SET("total_supply = #{record.totalSupply,jdbcType=DOUBLE}");
        sql.SET("decimals = #{record.decimals,jdbcType=INTEGER}");
        sql.SET("contract_address = #{record.contractAddress,jdbcType=VARCHAR}");
        sql.SET("contract_address_list = #{record.contractAddressList,jdbcType=VARCHAR}");
        sql.SET("marketcap = #{record.marketcap,jdbcType=DOUBLE}");
        sql.SET("change24h = #{record.change24h,jdbcType=DOUBLE}");
        sql.SET("change7d = #{record.change7d,jdbcType=DOUBLE}");
        sql.SET("rank = #{record.rank,jdbcType=VARCHAR}");
        
        TickersCriteria example = (TickersCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(Tickers record) {
        SQL sql = new SQL();
        sql.UPDATE("tickers");
        
        if (record.getTickerId() != null) {
            sql.SET("ticker_id = #{tickerId,jdbcType=VARCHAR}");
        }
        
        if (record.getDisplayPairName() != null) {
            sql.SET("display_pair_name = #{displayPairName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinSymbol() != null) {
            sql.SET("coin_symbol = #{coinSymbol,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinName() != null) {
            sql.SET("coin_name = #{coinName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoinId() != null) {
            sql.SET("coin_id = #{coinId,jdbcType=VARCHAR}");
        }
        
        if (record.getBaseSymbol() != null) {
            sql.SET("base_symbol = #{baseSymbol,jdbcType=VARCHAR}");
        }
        
        if (record.getChange1d() != null) {
            sql.SET("change1d = #{change1d,jdbcType=DOUBLE}");
        }
        
        if (record.getType() != null) {
            sql.SET("type = #{type,jdbcType=VARCHAR}");
        }
        
        if (record.getBid() != null) {
            sql.SET("bid = #{bid,jdbcType=DOUBLE}");
        }
        
        if (record.getAsk() != null) {
            sql.SET("ask = #{ask,jdbcType=DOUBLE}");
        }
        
        if (record.getNativePrice() != null) {
            sql.SET("native_price = #{nativePrice,jdbcType=DOUBLE}");
        }
        
        if (record.getLow1d() != null) {
            sql.SET("low1d = #{low1d,jdbcType=DOUBLE}");
        }
        
        if (record.getHigh1d() != null) {
            sql.SET("high1d = #{high1d,jdbcType=DOUBLE}");
        }
        
        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeDisplayName() != null) {
            sql.SET("exchange_display_name = #{exchangeDisplayName,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeZhName() != null) {
            sql.SET("exchange_zh_name = #{exchangeZhName,jdbcType=VARCHAR}");
        }
        
        if (record.getExchangeName() != null) {
            sql.SET("exchange_name = #{exchangeName,jdbcType=VARCHAR}");
        }
        
        if (record.getUrl() != null) {
            sql.SET("url = #{url,jdbcType=VARCHAR}");
        }
        
        if (record.getDatacenterPairName() != null) {
            sql.SET("dataCenter_pair_name = #{datacenterPairName,jdbcType=VARCHAR}");
        }
        
        if (record.getTimestamps() != null) {
            sql.SET("timestamps = #{timestamps,jdbcType=VARCHAR}");
        }
        
        if (record.getEnablekline() != null) {
            sql.SET("enableKline = #{enablekline,jdbcType=VARCHAR}");
        }
        
        if (record.getPeriod() != null) {
            sql.SET("period = #{period,jdbcType=VARCHAR}");
        }
        
        if (record.getVolume() != null) {
            sql.SET("volume = #{volume,jdbcType=DOUBLE}");
        }
        
        if (record.getPrice() != null) {
            sql.SET("price = #{price,jdbcType=DOUBLE}");
        }
        
        if (record.getPercent() != null) {
            sql.SET("percent = #{percent,jdbcType=DOUBLE}");
        }
        
        if (record.getBaseVolume() != null) {
            sql.SET("base_volume = #{baseVolume,jdbcType=DOUBLE}");
        }
        
        if (record.getTotalSupply() != null) {
            sql.SET("total_supply = #{totalSupply,jdbcType=DOUBLE}");
        }
        
        if (record.getDecimals() != null) {
            sql.SET("decimals = #{decimals,jdbcType=INTEGER}");
        }
        
        if (record.getContractAddress() != null) {
            sql.SET("contract_address = #{contractAddress,jdbcType=VARCHAR}");
        }
        
        if (record.getContractAddressList() != null) {
            sql.SET("contract_address_list = #{contractAddressList,jdbcType=VARCHAR}");
        }
        
        if (record.getMarketcap() != null) {
            sql.SET("marketcap = #{marketcap,jdbcType=DOUBLE}");
        }
        
        if (record.getChange24h() != null) {
            sql.SET("change24h = #{change24h,jdbcType=DOUBLE}");
        }
        
        if (record.getChange7d() != null) {
            sql.SET("change7d = #{change7d,jdbcType=DOUBLE}");
        }
        
        if (record.getRank() != null) {
            sql.SET("rank = #{rank,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, TickersCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}