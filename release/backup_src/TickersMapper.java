package wang.raye.springboot.model.mapper;

import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;
import wang.raye.springboot.model.Tickers;
import wang.raye.springboot.model.TickersCriteria;

public interface TickersMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @SelectProvider(type=TickersSqlProvider.class, method="countByExample")
    long countByExample(TickersCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @DeleteProvider(type=TickersSqlProvider.class, method="deleteByExample")
    int deleteByExample(TickersCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @Delete({
        "delete from tickers",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @Insert({
        "insert into tickers (id, ticker_id, ",
        "display_pair_name, coin_symbol, ",
        "coin_name, coin_id, ",
        "base_symbol, change1d, ",
        "type, bid, ask, ",
        "native_price, low1d, ",
        "high1d, status, exchange_display_name, ",
        "exchange_zh_name, exchange_name, ",
        "url, dataCenter_pair_name, ",
        "timestamps, enableKline, ",
        "period, volume, price, ",
        "percent, base_volume, ",
        "total_supply, decimals, ",
        "contract_address, contract_address_list, ",
        "marketcap, change24h, ",
        "change7d, rank)",
        "values (#{id,jdbcType=INTEGER}, #{tickerId,jdbcType=VARCHAR}, ",
        "#{displayPairName,jdbcType=VARCHAR}, #{coinSymbol,jdbcType=VARCHAR}, ",
        "#{coinName,jdbcType=VARCHAR}, #{coinId,jdbcType=VARCHAR}, ",
        "#{baseSymbol,jdbcType=VARCHAR}, #{change1d,jdbcType=DOUBLE}, ",
        "#{type,jdbcType=VARCHAR}, #{bid,jdbcType=DOUBLE}, #{ask,jdbcType=DOUBLE}, ",
        "#{nativePrice,jdbcType=DOUBLE}, #{low1d,jdbcType=DOUBLE}, ",
        "#{high1d,jdbcType=DOUBLE}, #{status,jdbcType=VARCHAR}, #{exchangeDisplayName,jdbcType=VARCHAR}, ",
        "#{exchangeZhName,jdbcType=VARCHAR}, #{exchangeName,jdbcType=VARCHAR}, ",
        "#{url,jdbcType=VARCHAR}, #{datacenterPairName,jdbcType=VARCHAR}, ",
        "#{timestamps,jdbcType=VARCHAR}, #{enablekline,jdbcType=VARCHAR}, ",
        "#{period,jdbcType=VARCHAR}, #{volume,jdbcType=DOUBLE}, #{price,jdbcType=DOUBLE}, ",
        "#{percent,jdbcType=DOUBLE}, #{baseVolume,jdbcType=DOUBLE}, ",
        "#{totalSupply,jdbcType=DOUBLE}, #{decimals,jdbcType=INTEGER}, ",
        "#{contractAddress,jdbcType=VARCHAR}, #{contractAddressList,jdbcType=VARCHAR}, ",
        "#{marketcap,jdbcType=DOUBLE}, #{change24h,jdbcType=DOUBLE}, ",
        "#{change7d,jdbcType=DOUBLE}, #{rank,jdbcType=VARCHAR})"
    })
    int insert(Tickers record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @InsertProvider(type=TickersSqlProvider.class, method="insertSelective")
    int insertSelective(Tickers record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @SelectProvider(type=TickersSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="ticker_id", property="tickerId", jdbcType=JdbcType.VARCHAR),
        @Result(column="display_pair_name", property="displayPairName", jdbcType=JdbcType.VARCHAR),
        @Result(column="coin_symbol", property="coinSymbol", jdbcType=JdbcType.VARCHAR),
        @Result(column="coin_name", property="coinName", jdbcType=JdbcType.VARCHAR),
        @Result(column="coin_id", property="coinId", jdbcType=JdbcType.VARCHAR),
        @Result(column="base_symbol", property="baseSymbol", jdbcType=JdbcType.VARCHAR),
        @Result(column="change1d", property="change1d", jdbcType=JdbcType.DOUBLE),
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR),
        @Result(column="bid", property="bid", jdbcType=JdbcType.DOUBLE),
        @Result(column="ask", property="ask", jdbcType=JdbcType.DOUBLE),
        @Result(column="native_price", property="nativePrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="low1d", property="low1d", jdbcType=JdbcType.DOUBLE),
        @Result(column="high1d", property="high1d", jdbcType=JdbcType.DOUBLE),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="exchange_display_name", property="exchangeDisplayName", jdbcType=JdbcType.VARCHAR),
        @Result(column="exchange_zh_name", property="exchangeZhName", jdbcType=JdbcType.VARCHAR),
        @Result(column="exchange_name", property="exchangeName", jdbcType=JdbcType.VARCHAR),
        @Result(column="url", property="url", jdbcType=JdbcType.VARCHAR),
        @Result(column="dataCenter_pair_name", property="datacenterPairName", jdbcType=JdbcType.VARCHAR),
        @Result(column="timestamps", property="timestamps", jdbcType=JdbcType.VARCHAR),
        @Result(column="enableKline", property="enablekline", jdbcType=JdbcType.VARCHAR),
        @Result(column="period", property="period", jdbcType=JdbcType.VARCHAR),
        @Result(column="volume", property="volume", jdbcType=JdbcType.DOUBLE),
        @Result(column="price", property="price", jdbcType=JdbcType.DOUBLE),
        @Result(column="percent", property="percent", jdbcType=JdbcType.DOUBLE),
        @Result(column="base_volume", property="baseVolume", jdbcType=JdbcType.DOUBLE),
        @Result(column="total_supply", property="totalSupply", jdbcType=JdbcType.DOUBLE),
        @Result(column="decimals", property="decimals", jdbcType=JdbcType.INTEGER),
        @Result(column="contract_address", property="contractAddress", jdbcType=JdbcType.VARCHAR),
        @Result(column="contract_address_list", property="contractAddressList", jdbcType=JdbcType.VARCHAR),
        @Result(column="marketcap", property="marketcap", jdbcType=JdbcType.DOUBLE),
        @Result(column="change24h", property="change24h", jdbcType=JdbcType.DOUBLE),
        @Result(column="change7d", property="change7d", jdbcType=JdbcType.DOUBLE),
        @Result(column="rank", property="rank", jdbcType=JdbcType.VARCHAR)
    })
    List<Tickers> selectByExample(TickersCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, ticker_id, display_pair_name, coin_symbol, coin_name, coin_id, base_symbol, ",
        "change1d, type, bid, ask, native_price, low1d, high1d, status, exchange_display_name, ",
        "exchange_zh_name, exchange_name, url, dataCenter_pair_name, timestamps, enableKline, ",
        "period, volume, price, percent, base_volume, total_supply, decimals, contract_address, ",
        "contract_address_list, marketcap, change24h, change7d, rank",
        "from tickers",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="ticker_id", property="tickerId", jdbcType=JdbcType.VARCHAR),
        @Result(column="display_pair_name", property="displayPairName", jdbcType=JdbcType.VARCHAR),
        @Result(column="coin_symbol", property="coinSymbol", jdbcType=JdbcType.VARCHAR),
        @Result(column="coin_name", property="coinName", jdbcType=JdbcType.VARCHAR),
        @Result(column="coin_id", property="coinId", jdbcType=JdbcType.VARCHAR),
        @Result(column="base_symbol", property="baseSymbol", jdbcType=JdbcType.VARCHAR),
        @Result(column="change1d", property="change1d", jdbcType=JdbcType.DOUBLE),
        @Result(column="type", property="type", jdbcType=JdbcType.VARCHAR),
        @Result(column="bid", property="bid", jdbcType=JdbcType.DOUBLE),
        @Result(column="ask", property="ask", jdbcType=JdbcType.DOUBLE),
        @Result(column="native_price", property="nativePrice", jdbcType=JdbcType.DOUBLE),
        @Result(column="low1d", property="low1d", jdbcType=JdbcType.DOUBLE),
        @Result(column="high1d", property="high1d", jdbcType=JdbcType.DOUBLE),
        @Result(column="status", property="status", jdbcType=JdbcType.VARCHAR),
        @Result(column="exchange_display_name", property="exchangeDisplayName", jdbcType=JdbcType.VARCHAR),
        @Result(column="exchange_zh_name", property="exchangeZhName", jdbcType=JdbcType.VARCHAR),
        @Result(column="exchange_name", property="exchangeName", jdbcType=JdbcType.VARCHAR),
        @Result(column="url", property="url", jdbcType=JdbcType.VARCHAR),
        @Result(column="dataCenter_pair_name", property="datacenterPairName", jdbcType=JdbcType.VARCHAR),
        @Result(column="timestamps", property="timestamps", jdbcType=JdbcType.VARCHAR),
        @Result(column="enableKline", property="enablekline", jdbcType=JdbcType.VARCHAR),
        @Result(column="period", property="period", jdbcType=JdbcType.VARCHAR),
        @Result(column="volume", property="volume", jdbcType=JdbcType.DOUBLE),
        @Result(column="price", property="price", jdbcType=JdbcType.DOUBLE),
        @Result(column="percent", property="percent", jdbcType=JdbcType.DOUBLE),
        @Result(column="base_volume", property="baseVolume", jdbcType=JdbcType.DOUBLE),
        @Result(column="total_supply", property="totalSupply", jdbcType=JdbcType.DOUBLE),
        @Result(column="decimals", property="decimals", jdbcType=JdbcType.INTEGER),
        @Result(column="contract_address", property="contractAddress", jdbcType=JdbcType.VARCHAR),
        @Result(column="contract_address_list", property="contractAddressList", jdbcType=JdbcType.VARCHAR),
        @Result(column="marketcap", property="marketcap", jdbcType=JdbcType.DOUBLE),
        @Result(column="change24h", property="change24h", jdbcType=JdbcType.DOUBLE),
        @Result(column="change7d", property="change7d", jdbcType=JdbcType.DOUBLE),
        @Result(column="rank", property="rank", jdbcType=JdbcType.VARCHAR)
    })
    Tickers selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TickersSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") Tickers record, @Param("example") TickersCriteria example);

    @UpdateProvider(type=TickersSqlProvider.class, method="updateBatchByExampleSelective")
    int updateBatchByExampleSelective(@Param("record") List<Tickers> records, @Param("example") TickersCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TickersSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") Tickers record, @Param("example") TickersCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @UpdateProvider(type=TickersSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(Tickers record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tickers
     *
     * @mbg.generated
     */
    @Update({
        "update tickers",
        "set ticker_id = #{tickerId,jdbcType=VARCHAR},",
          "display_pair_name = #{displayPairName,jdbcType=VARCHAR},",
          "coin_symbol = #{coinSymbol,jdbcType=VARCHAR},",
          "coin_name = #{coinName,jdbcType=VARCHAR},",
          "coin_id = #{coinId,jdbcType=VARCHAR},",
          "base_symbol = #{baseSymbol,jdbcType=VARCHAR},",
          "change1d = #{change1d,jdbcType=DOUBLE},",
          "type = #{type,jdbcType=VARCHAR},",
          "bid = #{bid,jdbcType=DOUBLE},",
          "ask = #{ask,jdbcType=DOUBLE},",
          "native_price = #{nativePrice,jdbcType=DOUBLE},",
          "low1d = #{low1d,jdbcType=DOUBLE},",
          "high1d = #{high1d,jdbcType=DOUBLE},",
          "status = #{status,jdbcType=VARCHAR},",
          "exchange_display_name = #{exchangeDisplayName,jdbcType=VARCHAR},",
          "exchange_zh_name = #{exchangeZhName,jdbcType=VARCHAR},",
          "exchange_name = #{exchangeName,jdbcType=VARCHAR},",
          "url = #{url,jdbcType=VARCHAR},",
          "dataCenter_pair_name = #{datacenterPairName,jdbcType=VARCHAR},",
          "timestamps = #{timestamps,jdbcType=VARCHAR},",
          "enableKline = #{enablekline,jdbcType=VARCHAR},",
          "period = #{period,jdbcType=VARCHAR},",
          "volume = #{volume,jdbcType=DOUBLE},",
          "price = #{price,jdbcType=DOUBLE},",
          "percent = #{percent,jdbcType=DOUBLE},",
          "base_volume = #{baseVolume,jdbcType=DOUBLE},",
          "total_supply = #{totalSupply,jdbcType=DOUBLE},",
          "decimals = #{decimals,jdbcType=INTEGER},",
          "contract_address = #{contractAddress,jdbcType=VARCHAR},",
          "contract_address_list = #{contractAddressList,jdbcType=VARCHAR},",
          "marketcap = #{marketcap,jdbcType=DOUBLE},",
          "change24h = #{change24h,jdbcType=DOUBLE},",
          "change7d = #{change7d,jdbcType=DOUBLE},",
          "rank = #{rank,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Tickers record);
}